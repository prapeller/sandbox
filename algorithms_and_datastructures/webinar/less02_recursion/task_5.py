"""
5.	Вывести на экран коды и символы таблицы ASCII, начиная с символа
под номером 32 и заканчивая 127-м включительно.
Вывод выполнить в табличной форме: по десять пар "код-символ" в каждой строке.

Пример:
32 -   33 - ! 34 - " 35 - # 36 - $ 37 - % 38 - & 39 - ' 40 - ( 41 - )
42 - * 43 - + 44 - , 45 - - 46 - . 47 - / 48 - 0 49 - 1 50 - 2 51 - 3
52 - 4 53 - 5 54 - 6 55 - 7 56 - 8 57 - 9 58 - : 59 - ; 60 - < 61 - =
62 - > 63 - ? 64 - @ 65 - A 66 - B 67 - C 68 - D 69 - E 70 - F 71 - G
72 - H 73 - I 74 - J 75 - K 76 - L 77 - M 78 - N 79 - O 80 - P 81 - Q
82 - R 83 - S 84 - T 85 - U 86 - V 87 - W 88 - X 89 - Y 90 - Z 91 - [
92 - \ 93 - ] 94 - ^ 95 - _ 96 - ` 97 - a 98 - b 99 - c 100 - d 101 - e
102 - f 103 - g 104 - h 105 - i 106 - j 107 - k 108 - l 109 - m 110 - n 111 - o
112 - p 113 - q 114 - r 115 - s 116 - t 117 - u 118 - v 119 - w 120 - x 121 - y
122 - z 123 - { 124 - | 125 - } 126 - ~ 127 - 

Подсказка:
Допускается исп-е встроенных ф-ций, в частности, chr()

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""


def get_recursion_line(a=32, b=128, line_length=10, line=''):
    if a == b:
        return line

    if line_length == 0:
        line += '\n'
        line_length = 10

    line += f'{a} - {chr(a)} '
    a += 1
    line_length -= 1

    return get_recursion_line(a, b, line_length, line)


if __name__ == '__main__':
    # решение задания
    #
    print(get_recursion_line())
    print()

    # хоть этого и не требовалось по заданию, но стало интересно и попытался сделать так, чтоб длину строки можно было
    # определять параметром. не могу придумать как это сделать. это возможно вообще?)))
    # вот у меня: тут можно задать параметр длины строки 20 (который работает как счетчик) но она уже на первом обнулении этого счетчика сбросит до 10.
    # попробовал добавить другой счетчик который ссылается на внешний параметр, но тогда получается на каждом новом вызове
    # (т.е. углублении) рекурсии этот другой счетчик будет обнуляться до изначально заданного значения внешнего параметра.

    print(get_recursion_line(30, 100, 20))
    print()


#  цикл то такое позволяет делать))

def get_cycle_line(a=32, b=128, line_length=10, string=''):
    string = string
    count = line_length

    for n in range(a, b):
        if count == 0:
            string += '\n'
            count = line_length

        string += f'{n} - {chr(n)} '
        count -= 1

    return string


if __name__ == '__main__':
    print(get_cycle_line())
    print(get_cycle_line(30, 100, 20))
