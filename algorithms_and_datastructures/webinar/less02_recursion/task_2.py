"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""


def count_even_odd(num: int):
    if num < 10:
        return (1, 0) if (num % 2) == 0 else (0, 1)

    num = num // 10

    if num % 10 % 2 == 0:
        return count_even_odd(num)[0] + 1, count_even_odd(num)[1]
    else:
        return count_even_odd(num)[0], count_even_odd(num)[1] + 1


if __name__ == '__main__':
    is_complete = False

    while not is_complete:
        try:
            user_num = int(input('enter integer > '))
            print(f'the number of even, odd digits in your integer: {count_even_odd(user_num)}')
            is_complete = True
        except Exception as e:
            print(e)
